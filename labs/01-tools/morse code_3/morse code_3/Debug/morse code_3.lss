
morse code_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000212  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c9d  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099b  00000000  00000000  00000fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ed  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e6  00000000  00000000  00001d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000404  00000000  00000000  00002272  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002676  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  c4:	0c 94 07 01 	jmp	0x20e	; 0x20e <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <dot>:

/* Function prototypes -----------------------------------------------*/

/* Functions ---------------------------------------------------------*/
void dot(){
	PORTC = PORTC | (1<<LED_GREEN);
  cc:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	8b e7       	ldi	r24, 0x7B	; 123
  d2:	92 e9       	ldi	r25, 0x92	; 146
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <dot+0x8>
  dc:	00 c0       	rjmp	.+0      	; 0xde <dot+0x12>
  de:	00 00       	nop
	_delay_ms(SHORT_DELAY_dot);
	PORTC = PORTC & ~(1<<LED_GREEN);
  e0:	42 98       	cbi	0x08, 2	; 8
  e2:	08 95       	ret

000000e4 <dash>:
}

void dash(){
	PORTC = PORTC | (1<<LED_GREEN);
  e4:	42 9a       	sbi	0x08, 2	; 8
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	83 e2       	ldi	r24, 0x23	; 35
  ea:	94 ef       	ldi	r25, 0xF4	; 244
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <dash+0x8>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <dash+0x12>
  f6:	00 00       	nop
	_delay_ms(SHORT_DELAY_dash);
	PORTC = PORTC & ~(1<<LED_GREEN);
  f8:	42 98       	cbi	0x08, 2	; 8
  fa:	08 95       	ret

000000fc <space>:
}

void space(){
	PORTC = PORTC | (1<<LED_GREEN);
  fc:	42 9a       	sbi	0x08, 2	; 8
  fe:	2a ea       	ldi	r18, 0xAA	; 170
 100:	34 ed       	ldi	r19, 0xD4	; 212
 102:	8c e1       	ldi	r24, 0x1C	; 28
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	21 50       	subi	r18, 0x01	; 1
 108:	30 40       	sbci	r19, 0x00	; 0
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	d9 f7       	brne	.-10     	; 0x106 <space+0xa>
 110:	00 00       	nop
	_delay_ms(SHORT_DELAY_space);
	PORTC = PORTC & ~(1<<LED_GREEN);
 112:	42 98       	cbi	0x08, 2	; 8
 114:	08 95       	ret

00000116 <main>:
{
	int i; // integer used in for loop. 

    // Set pin as output in Data Direction Register
    // DDRC = DDRC or 0000 0100
    DDRC = DDRC | (1<<LED_GREEN);
 116:	3a 9a       	sbi	0x07, 2	; 7

    // Set pin LOW in Data Register (LED off)
    // PORTC = PORTC and 1111 1011
    PORTC = PORTC & ~(1<<LED_GREEN);
 118:	42 98       	cbi	0x08, 2	; 8

    // Infinite loop
    while (1)
    {
	dash();
 11a:	0e 94 72 00 	call	0xe4	; 0xe4 <dash>
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	83 ed       	ldi	r24, 0xD3	; 211
 122:	90 e3       	ldi	r25, 0x30	; 48
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0xe>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x18>
 12e:	00 00       	nop
	_delay_ms(SHORT_DELAY);

for (i=0;i<2;i++){
	dot();
 130:	0e 94 66 00 	call	0xcc	; 0xcc <dot>
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	83 ed       	ldi	r24, 0xD3	; 211
 138:	90 e3       	ldi	r25, 0x30	; 48
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x24>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x2e>
 144:	00 00       	nop
 146:	0e 94 66 00 	call	0xcc	; 0xcc <dot>
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	83 ed       	ldi	r24, 0xD3	; 211
 14e:	90 e3       	ldi	r25, 0x30	; 48
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x3a>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x44>
 15a:	00 00       	nop
	_delay_ms(SHORT_DELAY);
}
	space();
 15c:	0e 94 7e 00 	call	0xfc	; 0xfc <space>
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	83 ed       	ldi	r24, 0xD3	; 211
 164:	90 e3       	ldi	r25, 0x30	; 48
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x50>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x5a>
 170:	00 00       	nop
	_delay_ms(SHORT_DELAY);

	dot();
 172:	0e 94 66 00 	call	0xcc	; 0xcc <dot>
 176:	2f ef       	ldi	r18, 0xFF	; 255
 178:	83 ed       	ldi	r24, 0xD3	; 211
 17a:	90 e3       	ldi	r25, 0x30	; 48
 17c:	21 50       	subi	r18, 0x01	; 1
 17e:	80 40       	sbci	r24, 0x00	; 0
 180:	90 40       	sbci	r25, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x66>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x70>
 186:	00 00       	nop
	_delay_ms(SHORT_DELAY);

	space();
 188:	0e 94 7e 00 	call	0xfc	; 0xfc <space>
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	83 ed       	ldi	r24, 0xD3	; 211
 190:	90 e3       	ldi	r25, 0x30	; 48
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x7c>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x86>
 19c:	00 00       	nop
	_delay_ms(SHORT_DELAY);

for (i=0;i<2;i++){
	dot();
 19e:	0e 94 66 00 	call	0xcc	; 0xcc <dot>
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	83 ed       	ldi	r24, 0xD3	; 211
 1a6:	90 e3       	ldi	r25, 0x30	; 48
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x92>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x9c>
 1b2:	00 00       	nop
 1b4:	0e 94 66 00 	call	0xcc	; 0xcc <dot>
 1b8:	2f ef       	ldi	r18, 0xFF	; 255
 1ba:	83 ed       	ldi	r24, 0xD3	; 211
 1bc:	90 e3       	ldi	r25, 0x30	; 48
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <main+0xa8>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <main+0xb2>
 1c8:	00 00       	nop
	_delay_ms(SHORT_DELAY);
}
for (i=0;i<3;i++){
	dash();
 1ca:	0e 94 72 00 	call	0xe4	; 0xe4 <dash>
 1ce:	2f ef       	ldi	r18, 0xFF	; 255
 1d0:	83 ed       	ldi	r24, 0xD3	; 211
 1d2:	90 e3       	ldi	r25, 0x30	; 48
 1d4:	21 50       	subi	r18, 0x01	; 1
 1d6:	80 40       	sbci	r24, 0x00	; 0
 1d8:	90 40       	sbci	r25, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0xbe>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0xc8>
 1de:	00 00       	nop
 1e0:	0e 94 72 00 	call	0xe4	; 0xe4 <dash>
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	83 ed       	ldi	r24, 0xD3	; 211
 1e8:	90 e3       	ldi	r25, 0x30	; 48
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0xd4>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0xde>
 1f4:	00 00       	nop
 1f6:	0e 94 72 00 	call	0xe4	; 0xe4 <dash>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	83 ed       	ldi	r24, 0xD3	; 211
 1fe:	90 e3       	ldi	r25, 0x30	; 48
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <main+0xea>
 208:	00 c0       	rjmp	.+0      	; 0x20a <main+0xf4>
 20a:	00 00       	nop
 20c:	86 cf       	rjmp	.-244    	; 0x11a <main+0x4>

0000020e <_exit>:
 20e:	f8 94       	cli

00000210 <__stop_program>:
 210:	ff cf       	rjmp	.-2      	; 0x210 <__stop_program>
