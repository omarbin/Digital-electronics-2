
segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000002e6  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010e  0080010e  00000388  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ecf  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000877  00000000  00000000  0000137f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005dd  00000000  00000000  00001bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  000021d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ff  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c0  00000000  00000000  00002857  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002d17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
	*reg_name++;                    // Change pointer to Data Register
	*reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
	*reg_name = *reg_name & ~(1<<pin_num); //clear bit (and not)
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:

/*--------------------------------------------------------------------*/
/* GPIO_write_high */
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num); //set bit (or)
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Timer/Counter1 overflows.
 */
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <SEG_init>
    //SEG_update_shift_regs(cnt0, 0);
	

    /* Configure 16-bit Timer/Counter1
     * Set prescaler and enable overflow interrupt */
	TIM1_overflow_1s();
  f4:	e1 e8       	ldi	r30, 0x81	; 129
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8c 7f       	andi	r24, 0xFC	; 252
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	84 60       	ori	r24, 0x04	; 4
 102:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 104:	ef e6       	ldi	r30, 0x6F	; 111
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	81 60       	ori	r24, 0x01	; 1
 10c:	80 83       	st	Z, r24
	
	TIM0_overflow_4ms();
 10e:	85 b5       	in	r24, 0x25	; 37
 110:	8c 7f       	andi	r24, 0xFC	; 252
 112:	85 bd       	out	0x25, r24	; 37
 114:	85 b5       	in	r24, 0x25	; 37
 116:	84 60       	ori	r24, 0x04	; 4
 118:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 11a:	ee e6       	ldi	r30, 0x6E	; 110
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	81 60       	ori	r24, 0x01	; 1
 122:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
	sei();
 124:	78 94       	sei
 126:	ff cf       	rjmp	.-2      	; 0x126 <main+0x36>

00000128 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Increment decimal counter
 * value and display it on SSD.
 */
ISR(TIMER1_OVF_vect)
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	8f 93       	push	r24
    // WRITE YOUR CODE HERE
	cnt0++; 
 134:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt0>
 138:	8f 5f       	subi	r24, 0xFF	; 255
	if (cnt0 >= 10) {
 13a:	8a 30       	cpi	r24, 0x0A	; 10
 13c:	18 f4       	brcc	.+6      	; 0x144 <__vector_13+0x1c>
 * value and display it on SSD.
 */
ISR(TIMER1_OVF_vect)
{
    // WRITE YOUR CODE HERE
	cnt0++; 
 13e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <cnt0>
 142:	07 c0       	rjmp	.+14     	; 0x152 <__vector_13+0x2a>
	if (cnt0 >= 10) {
	    cnt0 = 0;
 144:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <cnt0>
	    cnt1++;
 148:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt1>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cnt1>
	}
	if (cnt1>=6)
 152:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt1>
 156:	86 30       	cpi	r24, 0x06	; 6
 158:	10 f0       	brcs	.+4      	; 0x15e <__vector_13+0x36>
	{
	    cnt1=0;
 15a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cnt1>
	}
}
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_16>:

ISR(TIMER0_OVF_vect)
{
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
	// WRITE YOUR CODE HERE
	static uint8_t pos = 0;
	if (pos==0) 
 18c:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end>
 190:	61 11       	cpse	r22, r1
 192:	0a c0       	rjmp	.+20     	; 0x1a8 <__vector_16+0x3e>
	{
	    SEG_update_shift_regs(cnt0, pos);
 194:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt0>
 198:	0e 94 fe 00 	call	0x1fc	; 0x1fc <SEG_update_shift_regs>
	    pos++;
 19c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1a0:	8f 5f       	subi	r24, 0xFF	; 255
 1a2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 1a6:	09 c0       	rjmp	.+18     	; 0x1ba <__vector_16+0x50>
	}
	else
	{ 
	    SEG_update_shift_regs(cnt1, pos);
 1a8:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt1>
 1ac:	0e 94 fe 00 	call	0x1fc	; 0x1fc <SEG_update_shift_regs>
		pos--;
 1b0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 1b4:	81 50       	subi	r24, 0x01	; 1
 1b6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	}
 1ba:	ff 91       	pop	r31
 1bc:	ef 91       	pop	r30
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	7f 91       	pop	r23
 1c8:	6f 91       	pop	r22
 1ca:	5f 91       	pop	r21
 1cc:	4f 91       	pop	r20
 1ce:	3f 91       	pop	r19
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <SEG_init>:

/* Function definitions ----------------------------------------------*/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEGMENT_LATCH);
 1dc:	64 e0       	ldi	r22, 0x04	; 4
 1de:	8a e2       	ldi	r24, 0x2A	; 42
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEGMENT_CLK);
 1e6:	67 e0       	ldi	r22, 0x07	; 7
 1e8:	8a e2       	ldi	r24, 0x2A	; 42
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEGMENT_DATA);
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	84 e2       	ldi	r24, 0x24	; 36
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 1fa:	08 95       	ret

000001fc <SEG_update_shift_regs>:
}

/*--------------------------------------------------------------------*/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
    uint8_t bit_number;
	segments = segment_value[segments];     // 0, 1, ..., 9
 202:	e8 2f       	mov	r30, r24
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	ec 5f       	subi	r30, 0xFC	; 252
 208:	fe 4f       	sbci	r31, 0xFE	; 254
 20a:	10 81       	ld	r17, Z
	position = segment_position[position];  // 0, 1, 2, 3
 20c:	e6 2f       	mov	r30, r22
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	e0 50       	subi	r30, 0x00	; 0
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
	
	GPIO_write_low(&PORTD, SEGMENT_LATCH);  //LATCH
 216:	64 e0       	ldi	r22, 0x04	; 4
 218:	8b e2       	ldi	r24, 0x2B	; 43
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTD, SEGMENT_CLK);    //CLK
 220:	67 e0       	ldi	r22, 0x07	; 7
 222:	8b e2       	ldi	r24, 0x2B	; 43
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	GPIO_write_low(&PORTB, SEGMENT_DATA);   //DATA
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	85 e2       	ldi	r24, 0x25	; 37
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 234:	85 e0       	ldi	r24, 0x05	; 5
 236:	8a 95       	dec	r24
 238:	f1 f7       	brne	.-4      	; 0x236 <SEG_update_shift_regs+0x3a>
 23a:	00 00       	nop
 23c:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "segments")
		if ((segments % 2) == 0)    //LSB is 0
 23e:	10 fd       	sbrc	r17, 0
 240:	06 c0       	rjmp	.+12     	; 0x24e <SEG_update_shift_regs+0x52>
		    GPIO_write_low(&PORTB, SEGMENT_DATA);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	85 e2       	ldi	r24, 0x25	; 37
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 24c:	05 c0       	rjmp	.+10     	; 0x258 <SEG_update_shift_regs+0x5c>
		else
		    GPIO_write_high(&PORTB, SEGMENT_DATA);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	85 e2       	ldi	r24, 0x25	; 37
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 258:	85 e0       	ldi	r24, 0x05	; 5
 25a:	8a 95       	dec	r24
 25c:	f1 f7       	brne	.-4      	; 0x25a <SEG_update_shift_regs+0x5e>
 25e:	00 00       	nop
        // Wait 1 us
		_delay_us(1);
        // Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 260:	67 e0       	ldi	r22, 0x07	; 7
 262:	8b e2       	ldi	r24, 0x2B	; 43
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 26a:	85 e0       	ldi	r24, 0x05	; 5
 26c:	8a 95       	dec	r24
 26e:	f1 f7       	brne	.-4      	; 0x26c <SEG_update_shift_regs+0x70>
 270:	00 00       	nop
        // Wait 1 us
		_delay_us(1);
        // Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 272:	67 e0       	ldi	r22, 0x07	; 7
 274:	8b e2       	ldi	r24, 0x2B	; 43
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        // Shift "segments"
        segments = segments >> 1;
 27c:	16 95       	lsr	r17
 27e:	c1 50       	subi	r28, 0x01	; 1
    // Wait 1 us
	_delay_us(1);

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 280:	f1 f6       	brne	.-68     	; 0x23e <SEG_update_shift_regs+0x42>
 282:	c8 e0       	ldi	r28, 0x08	; 8
    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Output DATA value (bit 0 of "position")
		if ((position % 2) == 0)    //LSB is 0
 284:	d0 fd       	sbrc	r29, 0
 286:	06 c0       	rjmp	.+12     	; 0x294 <SEG_update_shift_regs+0x98>
		    GPIO_write_low(&PORTB, SEGMENT_DATA);
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	85 e2       	ldi	r24, 0x25	; 37
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 292:	05 c0       	rjmp	.+10     	; 0x29e <SEG_update_shift_regs+0xa2>
		else
		    GPIO_write_high(&PORTB, SEGMENT_DATA);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	85 e2       	ldi	r24, 0x25	; 37
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 29e:	85 e0       	ldi	r24, 0x05	; 5
 2a0:	8a 95       	dec	r24
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <SEG_update_shift_regs+0xa4>
 2a4:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK high
		GPIO_write_high(&PORTD, SEGMENT_CLK);
 2a6:	67 e0       	ldi	r22, 0x07	; 7
 2a8:	8b e2       	ldi	r24, 0x2B	; 43
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2b0:	85 e0       	ldi	r24, 0x05	; 5
 2b2:	8a 95       	dec	r24
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <SEG_update_shift_regs+0xb6>
 2b6:	00 00       	nop
		// Wait 1 us
		_delay_us(1);
		// Pull CLK low
		GPIO_write_low(&PORTD, SEGMENT_CLK);
 2b8:	67 e0       	ldi	r22, 0x07	; 7
 2ba:	8b e2       	ldi	r24, 0x2B	; 43
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>

        // Shift "position"
        position = position >> 1;
 2c2:	d6 95       	lsr	r29
 2c4:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2c6:	f1 f6       	brne	.-68     	; 0x284 <SEG_update_shift_regs+0x88>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
	GPIO_write_high(&PORTD, SEGMENT_LATCH);
 2c8:	64 e0       	ldi	r22, 0x04	; 4
 2ca:	8b e2       	ldi	r24, 0x2B	; 43
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2d2:	85 e0       	ldi	r24, 0x05	; 5
 2d4:	8a 95       	dec	r24
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <SEG_update_shift_regs+0xd8>
 2d8:	00 00       	nop

    // Wait 1 us
	_delay_us(1);

}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	08 95       	ret

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
