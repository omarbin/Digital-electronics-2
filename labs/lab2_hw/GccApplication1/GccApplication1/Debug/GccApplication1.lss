
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d0  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033c  00000000  00000000  00001187  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000014c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f4  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000288  00000000  00000000  000018dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 */
int main(void)
{
    /* GREEN LED */
    // Set pin as output in Data Direction Register...
    DDRB = DDRB | (1<<LED_GREEN);
  80:	25 9a       	sbi	0x04, 5	; 4
    // ...and turn LED off in Data Register
    PORTB = PORTB & ~(1<<LED_GREEN);
  82:	2d 98       	cbi	0x05, 5	; 5

    /* RED, BLUE, YELLOW, ORANGE LED */
    // WRITE YOUR CODE HERE
	    DDRC = DDRC | (1<<LED_RED) | (1<<LED_BLUE) | (1<<LED_YELLOW) | (1<<LED_ORANGE); 
  84:	87 b1       	in	r24, 0x07	; 7
  86:	8d 61       	ori	r24, 0x1D	; 29
  88:	87 b9       	out	0x07, r24	; 7
	    PORTC = PORTC & ~(1<<LED_RED); // Turn OFF
  8a:	40 98       	cbi	0x08, 0	; 8
	    PORTC = PORTC & ~(1<<LED_BLUE); // Turn OFF
  8c:	42 98       	cbi	0x08, 2	; 8
	    PORTC = PORTC & ~(1<<LED_YELLOW); // Turn OFF
  8e:	43 98       	cbi	0x08, 3	; 8
	    PORTC = PORTC & ~(1<<LED_ORANGE); // Turn OFF
  90:	44 98       	cbi	0x08, 4	; 8

/* PUSH BUTTON */ 
        DDRD = DDRD & ~(1<<BTN); //input 
  92:	50 98       	cbi	0x0a, 0	; 10
		PORTD = PORTD | (1<<BTN); //enable internal pull-up
  94:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	89 e6       	ldi	r24, 0x69	; 105
  9a:	98 e1       	ldi	r25, 0x18	; 24
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x1c>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x26>
  a6:	00 00       	nop
    {
        // Pause several milliseconds
        _delay_ms(BLINK_DELAY);

        // WRITE YOUR CODE HERE
		if (bit_is_clear(PIND, BTN)) //set instead of clear
  a8:	48 99       	sbic	0x09, 0	; 9
  aa:	f5 cf       	rjmp	.-22     	; 0x96 <main+0x16>
		{
			PORTB = PORTB | (1<<LED_GREEN); // TURN ON
  ac:	2d 9a       	sbi	0x05, 5	; 5
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	89 e6       	ldi	r24, 0x69	; 105
  b2:	98 e1       	ldi	r25, 0x18	; 24
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x34>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x3e>
  be:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB & ~(1<<LED_GREEN); // TURN OFF
  c0:	2d 98       	cbi	0x05, 5	; 5
			
			PORTC = PORTC | (1<<LED_RED);    // TURN ON
  c2:	40 9a       	sbi	0x08, 0	; 8
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	89 e6       	ldi	r24, 0x69	; 105
  c8:	98 e1       	ldi	r25, 0x18	; 24
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	90 40       	sbci	r25, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x4a>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x54>
  d4:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC & ~(1<<LED_RED);   // TURN OFF
  d6:	40 98       	cbi	0x08, 0	; 8
			
			PORTC = PORTC | (1<<LED_BLUE);   // TURN ON
  d8:	42 9a       	sbi	0x08, 2	; 8
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	89 e6       	ldi	r24, 0x69	; 105
  de:	98 e1       	ldi	r25, 0x18	; 24
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	90 40       	sbci	r25, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x60>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x6a>
  ea:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC & ~(1<<LED_BLUE);   // TURN OFF
  ec:	42 98       	cbi	0x08, 2	; 8
			
			PORTC = PORTC | (1<<LED_YELLOW);   // TURN ON
  ee:	43 9a       	sbi	0x08, 3	; 8
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	89 e6       	ldi	r24, 0x69	; 105
  f4:	98 e1       	ldi	r25, 0x18	; 24
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x76>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x80>
 100:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC & ~(1<<LED_YELLOW);   // TURN OFF
 102:	43 98       	cbi	0x08, 3	; 8
			
			PORTC = PORTC | (1<<LED_ORANGE);   // TURN ON
 104:	44 9a       	sbi	0x08, 4	; 8
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	89 e6       	ldi	r24, 0x69	; 105
 10a:	98 e1       	ldi	r25, 0x18	; 24
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x8c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x96>
 116:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC & ~(1<<LED_ORANGE);   // TURN OFF
 118:	44 98       	cbi	0x08, 4	; 8
			
			//now starts to go backwards
			PORTC = PORTC | (1<<LED_YELLOW);   // TURN ON
 11a:	43 9a       	sbi	0x08, 3	; 8
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	89 e6       	ldi	r24, 0x69	; 105
 120:	98 e1       	ldi	r25, 0x18	; 24
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0xa2>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0xac>
 12c:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC & ~(1<<LED_YELLOW);   // TURN OFF
 12e:	43 98       	cbi	0x08, 3	; 8
			PORTC = PORTC | (1<<LED_BLUE);   // TURN ON
 130:	42 9a       	sbi	0x08, 2	; 8
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	89 e6       	ldi	r24, 0x69	; 105
 136:	98 e1       	ldi	r25, 0x18	; 24
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0xb8>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0xc2>
 142:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC & ~(1<<LED_BLUE);   // TURN OFF
 144:	42 98       	cbi	0x08, 2	; 8
			PORTC = PORTC | (1<<LED_RED);    // TURN ON
 146:	40 9a       	sbi	0x08, 0	; 8
 148:	2f ef       	ldi	r18, 0xFF	; 255
 14a:	89 e6       	ldi	r24, 0x69	; 105
 14c:	98 e1       	ldi	r25, 0x18	; 24
 14e:	21 50       	subi	r18, 0x01	; 1
 150:	80 40       	sbci	r24, 0x00	; 0
 152:	90 40       	sbci	r25, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0xce>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0xd8>
 158:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC & ~(1<<LED_RED);   // TURN OFF
 15a:	40 98       	cbi	0x08, 0	; 8
 15c:	9c cf       	rjmp	.-200    	; 0x96 <main+0x16>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
