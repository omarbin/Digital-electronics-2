
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d0  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035a  00000000  00000000  000011af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000150c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ca  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000288  00000000  00000000  000018fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 c4 00 	jmp	0x188	; 0x188 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 */
int main(void)
{
    /* GREEN LED */
    // Set pin as output in Data Direction Register...
    DDRB = DDRB | (1<<LED_GREEN);
  80:	25 9a       	sbi	0x04, 5	; 4
    // ...and turn LED off in Data Register
    PORTB = PORTB & ~(1<<LED_GREEN);
  82:	2d 98       	cbi	0x05, 5	; 5

    /* RED, BLUE, YELLOW, ORANGE LED */
    // WRITE YOUR CODE HERE
	    DDRC = DDRC | (1<<LED_RED) | (1<<LED_BLUE) | (1<<LED_YELLOW) | (1<<LED_ORANGE); 
  84:	87 b1       	in	r24, 0x07	; 7
  86:	8d 61       	ori	r24, 0x1D	; 29
  88:	87 b9       	out	0x07, r24	; 7
	    PORTC = PORTC | (1<<LED_RED); // Turn OFF
  8a:	40 9a       	sbi	0x08, 0	; 8
	    PORTC = PORTC | (1<<LED_BLUE); // Turn OFF
  8c:	42 9a       	sbi	0x08, 2	; 8
	    PORTC = PORTC | (1<<LED_YELLOW); // Turn OFF
  8e:	43 9a       	sbi	0x08, 3	; 8
	    PORTC = PORTC | (1<<LED_ORANGE); // Turn OFF
  90:	44 9a       	sbi	0x08, 4	; 8

/* PUSH BUTTON */ 
        DDRD = DDRD & ~(1<<BTN); //input 
  92:	50 98       	cbi	0x0a, 0	; 10
		PORTD = PORTD | (1<<BTN); //enable internal pull-up
  94:	58 9a       	sbi	0x0b, 0	; 11
        _delay_ms(BLINK_DELAY);

        // WRITE YOUR CODE HERE
		if (bit_is_set(PIND, BTN)) //set instead of clear
		{
			PORTB = PORTB ^ (1<<LED_GREEN); // TURN ON
  96:	50 e2       	ldi	r21, 0x20	; 32
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB & ~(1<<LED_GREEN); // TURN OFF
			
			PORTC = PORTC ^ (1<<LED_RED);    // TURN ON
  98:	31 e0       	ldi	r19, 0x01	; 1
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC | (1<<LED_RED);   // TURN OFF
			
			PORTC = PORTC ^ (1<<LED_BLUE);   // TURN ON
  9a:	24 e0       	ldi	r18, 0x04	; 4
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC | (1<<LED_BLUE);   // TURN OFF
			
			PORTC = PORTC ^ (1<<LED_YELLOW);   // TURN ON
  9c:	98 e0       	ldi	r25, 0x08	; 8
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC | (1<<LED_YELLOW);   // TURN OFF
			
			PORTC = PORTC ^ (1<<LED_ORANGE);   // TURN ON
  9e:	40 e1       	ldi	r20, 0x10	; 16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	6f ef       	ldi	r22, 0xFF	; 255
  a2:	73 ec       	ldi	r23, 0xC3	; 195
  a4:	89 e0       	ldi	r24, 0x09	; 9
  a6:	61 50       	subi	r22, 0x01	; 1
  a8:	70 40       	sbci	r23, 0x00	; 0
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x30>
  b0:	00 00       	nop
    {
        // Pause several milliseconds
        _delay_ms(BLINK_DELAY);

        // WRITE YOUR CODE HERE
		if (bit_is_set(PIND, BTN)) //set instead of clear
  b2:	48 9b       	sbis	0x09, 0	; 9
  b4:	f5 cf       	rjmp	.-22     	; 0xa0 <main+0x20>
		{
			PORTB = PORTB ^ (1<<LED_GREEN); // TURN ON
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	85 27       	eor	r24, r21
  ba:	85 b9       	out	0x05, r24	; 5
  bc:	6f ef       	ldi	r22, 0xFF	; 255
  be:	73 ec       	ldi	r23, 0xC3	; 195
  c0:	89 e0       	ldi	r24, 0x09	; 9
  c2:	61 50       	subi	r22, 0x01	; 1
  c4:	70 40       	sbci	r23, 0x00	; 0
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x42>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x4c>
  cc:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTB = PORTB & ~(1<<LED_GREEN); // TURN OFF
  ce:	2d 98       	cbi	0x05, 5	; 5
			
			PORTC = PORTC ^ (1<<LED_RED);    // TURN ON
  d0:	88 b1       	in	r24, 0x08	; 8
  d2:	83 27       	eor	r24, r19
  d4:	88 b9       	out	0x08, r24	; 8
  d6:	6f ef       	ldi	r22, 0xFF	; 255
  d8:	73 ec       	ldi	r23, 0xC3	; 195
  da:	89 e0       	ldi	r24, 0x09	; 9
  dc:	61 50       	subi	r22, 0x01	; 1
  de:	70 40       	sbci	r23, 0x00	; 0
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x5c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x66>
  e6:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC | (1<<LED_RED);   // TURN OFF
  e8:	40 9a       	sbi	0x08, 0	; 8
			
			PORTC = PORTC ^ (1<<LED_BLUE);   // TURN ON
  ea:	88 b1       	in	r24, 0x08	; 8
  ec:	82 27       	eor	r24, r18
  ee:	88 b9       	out	0x08, r24	; 8
  f0:	6f ef       	ldi	r22, 0xFF	; 255
  f2:	73 ec       	ldi	r23, 0xC3	; 195
  f4:	89 e0       	ldi	r24, 0x09	; 9
  f6:	61 50       	subi	r22, 0x01	; 1
  f8:	70 40       	sbci	r23, 0x00	; 0
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x76>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x80>
 100:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC | (1<<LED_BLUE);   // TURN OFF
 102:	42 9a       	sbi	0x08, 2	; 8
			
			PORTC = PORTC ^ (1<<LED_YELLOW);   // TURN ON
 104:	88 b1       	in	r24, 0x08	; 8
 106:	89 27       	eor	r24, r25
 108:	88 b9       	out	0x08, r24	; 8
 10a:	6f ef       	ldi	r22, 0xFF	; 255
 10c:	73 ec       	ldi	r23, 0xC3	; 195
 10e:	89 e0       	ldi	r24, 0x09	; 9
 110:	61 50       	subi	r22, 0x01	; 1
 112:	70 40       	sbci	r23, 0x00	; 0
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x90>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x9a>
 11a:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC | (1<<LED_YELLOW);   // TURN OFF
 11c:	43 9a       	sbi	0x08, 3	; 8
			
			PORTC = PORTC ^ (1<<LED_ORANGE);   // TURN ON
 11e:	88 b1       	in	r24, 0x08	; 8
 120:	84 27       	eor	r24, r20
 122:	88 b9       	out	0x08, r24	; 8
 124:	6f ef       	ldi	r22, 0xFF	; 255
 126:	73 ec       	ldi	r23, 0xC3	; 195
 128:	89 e0       	ldi	r24, 0x09	; 9
 12a:	61 50       	subi	r22, 0x01	; 1
 12c:	70 40       	sbci	r23, 0x00	; 0
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0xaa>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0xb4>
 134:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC | (1<<LED_ORANGE);   // TURN OFF
 136:	44 9a       	sbi	0x08, 4	; 8
			
			//now starts to go backwards
			PORTC = PORTC ^ (1<<LED_YELLOW);   // TURN ON
 138:	88 b1       	in	r24, 0x08	; 8
 13a:	89 27       	eor	r24, r25
 13c:	88 b9       	out	0x08, r24	; 8
 13e:	6f ef       	ldi	r22, 0xFF	; 255
 140:	73 ec       	ldi	r23, 0xC3	; 195
 142:	89 e0       	ldi	r24, 0x09	; 9
 144:	61 50       	subi	r22, 0x01	; 1
 146:	70 40       	sbci	r23, 0x00	; 0
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <main+0xc4>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xce>
 14e:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC | (1<<LED_YELLOW);   // TURN OFF
 150:	43 9a       	sbi	0x08, 3	; 8
			PORTC = PORTC ^ (1<<LED_BLUE);   // TURN ON
 152:	88 b1       	in	r24, 0x08	; 8
 154:	82 27       	eor	r24, r18
 156:	88 b9       	out	0x08, r24	; 8
 158:	6f ef       	ldi	r22, 0xFF	; 255
 15a:	73 ec       	ldi	r23, 0xC3	; 195
 15c:	89 e0       	ldi	r24, 0x09	; 9
 15e:	61 50       	subi	r22, 0x01	; 1
 160:	70 40       	sbci	r23, 0x00	; 0
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <main+0xde>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0xe8>
 168:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC | (1<<LED_BLUE);   // TURN OFF
 16a:	42 9a       	sbi	0x08, 2	; 8
			PORTC = PORTC ^ (1<<LED_RED);    // TURN ON
 16c:	88 b1       	in	r24, 0x08	; 8
 16e:	83 27       	eor	r24, r19
 170:	88 b9       	out	0x08, r24	; 8
 172:	6f ef       	ldi	r22, 0xFF	; 255
 174:	73 ec       	ldi	r23, 0xC3	; 195
 176:	89 e0       	ldi	r24, 0x09	; 9
 178:	61 50       	subi	r22, 0x01	; 1
 17a:	70 40       	sbci	r23, 0x00	; 0
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0xf8>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x102>
 182:	00 00       	nop
			_delay_ms(BLINK_DELAY);
			PORTC = PORTC | (1<<LED_RED);   // TURN OFF
 184:	40 9a       	sbi	0x08, 0	; 8
 186:	8c cf       	rjmp	.-232    	; 0xa0 <main+0x20>

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
